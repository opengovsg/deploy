name: deploy
description: |
  Opinionated convenience wrapper action for applications to deploy to AWS ECS or Fly.io
inputs:
  aws-account-id:
    description: 'AWS account ID to use'
    required: false
  aws-role-arn:
    description: 'AWS IAM role to assume by GitHub Actions'
    required: false
  aws-region:
    description: 'AWS Region'
    required: false
  aws-ecr-repo:
    description: 'ECR repository to push image to'
    required: false
  fly-org-name:
    description: 'Fly.io organisation name'
    required: false
  fly-app-name:
    description: 'Fly.io application name'
    required: false
  fly-api-token:
    description: 'API Token for Fly.io'
    required: false
  image-tag:
    description: 'The locally tagged docker image to push to Fly.io'
    required: true
    type: string

runs:
  using: composite
  steps:
    - id: determine-ecs
      shell: bash
      run: |
        if [[ -z "${AWS_ROLE_ARN}" || -z "${AWS_ACCOUNT_ID}" ]]; then
          echo 'ecs=false' >> $GITHUB_OUTPUT;
        elif [[ -z "${AWS_ECR_REPO}" || -z "${AWS_REGION}" ]]; then
          echo 'ecs=false' >> $GITHUB_OUTPUT;
        else
          echo 'ecs=true' >> $GITHUB_OUTPUT;
        fi
      env:
        AWS_ACCOUNT_ID: ${{ inputs.aws-account-id }}
        AWS_ROLE_ARN: ${{ inputs.aws-role-arn }}
        AWS_REGION: ${{ inputs.aws-region }}
        AWS_ECR_REPO: ${{ inputs.aws-ecr-repo }}
    - id: determine-fly
      shell: bash
      run: |
        if [[ -z "${FLY_APP_NAME}" || -z "${FLY_ORG_NAME}" ]]; then
          echo 'fly=false' >> $GITHUB_OUTPUT;
        elif [[ -z "${FLY_API_TOKEN}" ]]; then
          echo 'fly=false' >> $GITHUB_OUTPUT;
        else
          echo 'fly=true' >> $GITHUB_OUTPUT;
        fi
      env:
        FLY_APP_NAME: ${{ inputs.fly-app-name }}
        FLY_ORG_NAME: ${{ inputs.fly-org-name }}
        FLY_API_TOKEN: ${{ inputs.fly-api-token }}
    - uses: ./aws/action.yml
      if: steps.determine-ecs.outputs.ecs == 'true'
      with:
        aws-account-id: ${{ inputs.aws-account-id }}
        cicd-role: ${{ inputs.aws-role-arn }}
        aws-region: ${{ inputs.aws-region }}
        ecr-repository: ${{ inputs.aws-ecr-repo }}
        ecs-cluster-name: 'cluster-application-server'
        ecs-service-name: 'application-server'
        ecs-container-name: 'app'
        codedeploy-application: 'AppECS-cluster-application-server'
        codedeploy-deployment-group: 'DgpECS-cluster-application-server'
        image-tag: ${{ inputs.image-tag }}
    - uses: ./fly/action.yml
      if: steps.determine-fly.outputs.fly == 'true'
      with:
        app-name: ${{ inputs.fly-app-name }}
        fly-api-token: ${{ inputs.fly-api-token }}
        image-tag: ${{ inputs.image-tag }}
